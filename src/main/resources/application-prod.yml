spring:
  datasource:
    url: ${DATABASE_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    continue-on-error: true
    initialization-mode: never
    hikari:
      connection-timeout: 30000
      maximum-pool-size: 5
      minimum-idle: 2
      idle-timeout: 600000
      max-lifetime: 1800000
      connection-test-query: SELECT 1
      initialization-fail-timeout: -1
      # 연결 실패 시 빠른 실패 대신 재시도
      leak-detection-threshold: 60000
      validation-timeout: 5000
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQLDialect
        jdbc.time_zone: UTC
        # 트랜잭션 안정성 개선
        jdbc.batch_size: 20
        order_inserts: true
        order_updates: true
    defer-datasource-initialization: true
    open-in-view: false
  sql:
    init:
      continue-on-error: true
      mode: never
  # 애플리케이션 시작 시 데이터베이스 연결 검증 비활성화
  jmx:
    enabled: false

  # 🟢 운영 환경 MongoDB 설정
  data:
    mongodb:
      uri: ${MONGODB_URI}
      auto-index-creation: false
      # MongoDB 연결 실패 시에도 애플리케이션 시작 허용
      connection-pool:
        max-size: 10
        min-size: 0
        max-wait-time: 5000ms
        max-connection-life-time: 30000ms
      # MongoDB 연결 시도 시간 제한
      connection-timeout: 5000ms
      socket-timeout: 10000ms
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
        ssl:
          enabled: ${REDIS_SSL_ENABLED:true}

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: ${KAKAO_REDIRECT_URI:https://your-domain.com/login/oauth2/code/kakao}
            authorization-grant-type: authorization_code
            scope:
              - profile_nickname
            client-name: Kakao
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: ${NAVER_REDIRECT_URI:https://your-domain.com/login/oauth2/code/naver}
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# 🟢 운영 환경 Google Cloud 설정
gcp:
  enabled: ${GCP_ENABLED:true}
  project-id: ${GCP_PROJECT_ID}
  location: ${GCP_LOCATION:us}
  processor-id: ${GCP_PROCESSOR_ID}
  credentials:
    path: ${GCP_CREDENTIALS_PATH:classpath:service-account-key.json}

# 🟢 운영 환경 Gemini API 설정
gemini:
  api-key: ${GEMINI_API_KEY}
  model-name: gemini-2.5-flash
  api-url: ${GEMINI_API_URL:https://generativelanguage.googleapis.com}

# 계약 API 설정
contract:
  api:
    base-url: ${CONTRACT_API_BASE_URL:http://localhost:8000}

# 챗봇 API 설정
chatbot:
  api:
    base-url: ${CHATBOT_API_BASE_URL:http://43.201.42.119:8000}
    timeout: ${CHATBOT_API_TIMEOUT:30000}

# ML API 설정
ml:
  api:
    base-url: ${ML_API_BASE_URL:http://43.201.42.119:8000/}
    connection-timeout: ${ML_API_CONNECTION_TIMEOUT:10000}
    read-timeout: ${ML_API_READ_TIMEOUT:60000}

jwt:
  secret: ${JWT_SECRET}
  access-token-validity: ${JWT_ACCESS_TOKEN_VALIDITY:86400000}

# AES 양방향 암호화 설정
aes:
  secret-key: ${AES_SECRET_KEY}

server:
  # Nginx 리버스 프록시 사용 시 내부 HTTP 포트
  port: ${SERVER_PORT:8080}
  address: 0.0.0.0

  # Nginx를 통한 HTTPS 사용 시 forwarded headers 신뢰
  forward-headers-strategy: framework
  use-forward-headers: true

  # 직접 HTTPS 사용 시 (Nginx 없이)
  # ssl:
  #   enabled: ${SSL_ENABLED:false}
  #   key-store: ${SSL_KEYSTORE_PATH:classpath:keystore.p12}
  #   key-store-type: ${SSL_KEYSTORE_TYPE:PKCS12}
  #   key-store-password: ${SSL_KEYSTORE_PASSWORD:}
  #   key-alias: ${SSL_KEY_ALIAS:superlawva}
  #   protocol: TLS
  #   enabled-protocols: TLSv1.2,TLSv1.3

# OAuth2 리다이렉트 URL은 이미 첫 번째 spring: 블록에 설정되어 있음
# (중복 키 제거됨)

# 프로덕션 환경 로깅
logging:
  level:
    com.superlawva: INFO
    com.superlawva.domain.ocr3: INFO
    com.superlawva.domain.document: INFO
    com.superlawva.domain.words: INFO
    com.superlawva.domain.ml: INFO
    org.springframework.security: WARN
    org.springframework.boot: INFO
    org.springframework.context: INFO
    org.springframework.beans: INFO
    org.hibernate: ${LOGGING_LEVEL_ORG_HIBERNATE:WARN}
    org.springframework.data.redis: WARN
    org.springframework.data.mongodb: INFO
    root: ${LOGGING_LEVEL_ROOT:INFO}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# 테스트 사용자 생성 비활성화 (프로덕션 환경)
app:
  create-test-users: false

# Actuator 설정 (구동 우선)
management:
  endpoints:
    web:
      exposure:
        include: health,info
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  health:
    defaults:
      enabled: true # 기본 헬스체크 활성화
  server:
    port: 8080

frontend:
  url: ${FRONTEND_URL:http://localhost:3000}

# SpringDoc OpenAPI 설정 (prod 환경 명시적 활성화)
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
