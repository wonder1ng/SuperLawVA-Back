spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DATABASE_URL:jdbc:mysql://localhost:3306/superlawva?autocommit=false&useSSL=false&allowPublicKeyRetrieval=true}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:}

  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
        # soft delete 비활성화
        globally_quoted_identifiers: false

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6380}

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID:}
            client-secret: ${KAKAO_CLIENT_SECRET:}
            redirect-uri: ${KAKAO_REDIRECT_URI:http://localhost:8080/login/oauth2/code/kakao}
            authorization-grant-type: authorization_code
            scope:
              - profile_nickname
            client-name: Kakao
          naver:
            client-id: ${NAVER_CLIENT_ID:}
            client-secret: ${NAVER_CLIENT_SECRET:}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# 계약 API 설정
contract:
  api:
    base-url: ${CONTRACT_API_BASE_URL:}

jwt:
  secret: ${JWT_SECRET:temporary_jwt_secret_key_for_deployment_min_32_chars}
  access-token-validity: ${JWT_ACCESS_TOKEN_VALIDITY:43200000}

# AES 양방향 암호화 설정 (개인정보 암호화용)
aes:
  secret-key: ${AES_SECRET_KEY:temporary_aes_key_32_chars_long}

server:
  address: 0.0.0.0
  port: ${SERVER_PORT:8080}
  # SSL 설정 임시 비활성화 (배포 후 환경변수로 활성화 가능)
  # ssl:
  #   enabled: true
  #   key-store: classpath:keystore.p12
  #   key-store-type: PKCS12
  #   key-store-password: changeit
  #   key-alias: superlaw

# Actuator 설정 (헬스체크용)
management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: when-authorized

# AWS 설정
aws:
  region: ${AWS_REGION:ap-northeast-2}
  access-key-id: ${AWS_ACCESS_KEY_ID:}
  secret-access-key: ${AWS_SECRET_ACCESS_KEY:}
  s3:
    bucket-name: ${AWS_S3_BUCKET_NAME:superlawva-logs}
  cloudwatch:
    log-group-name: ${AWS_CLOUDWATCH_LOG_GROUP:superlawva-application}
    log-stream-name: ${AWS_CLOUDWATCH_LOG_STREAM:ec2-instance}

# 로깅 설정
logging:
  level:
    com.superlawva: DEBUG
    com.superlawva.global.security.filter.JwtAuthFilter: INFO
    org.apache.coyote.http11.Http11Processor: WARN
    org.springframework.security: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.dao: DEBUG
    org.springframework.jdbc: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
