name: Deploy Spring Boot to EC2

on:
  push:
    branches: [back/production, develop]

# Î∏åÎûúÏπò/ÌÉúÍ∑∏ Ïù¥Î¶ÑÏúºÎ°ú ÎèôÏãúÏÑ± Í∑∏Î£πÏùÑ ÏÑ§Ï†ï (Ïä¨ÎûòÏãú Î¨∏Ï†ú Î∞©ÏßÄ)
concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. ÏÜåÏä§ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 17 ÏÑ§Ï†ï
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "17"

      # 3. Gradle Ï∫êÏãú
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Spring Boot Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÎπåÎìú
      - name: Build Spring Boot App
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar -x test

      # 5. AWS Ïù∏Ï¶ù
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6. Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú, ÌÉúÍπÖ, Ìë∏Ïãú
      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "‚úÖ Docker image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # 7. docker-compose ÌååÏùº Ï†ÑÏÜ°
      - name: Copy docker-compose.prod.yml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: docker-compose.prod.yml
          target: /home/ubuntu/

      # 8-1. GCP ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌÇ§ Ï≤òÎ¶¨
      - name: ‚¨áÔ∏è Export GCP key (no base64)
        shell: bash
        run: |
          echo '${{ secrets.GCP_SERVICE_KEY_JSON }}' > /tmp/gcp-key.json
          echo "::add-mask::${{ secrets.GCP_SERVICE_KEY_JSON }}"
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV
          GCP_PROJECT_ID=$(jq -r '.project_id' /tmp/gcp-key.json)
          echo "GCP_PROJECT_ID=$GCP_PROJECT_ID" >> $GITHUB_ENV
          echo "GCP_PROCESSOR_ID=${{ secrets.GCP_PROCESSOR_ID }}" >> $GITHUB_ENV

      # 8-2. EC2 Î∞∞Ìè¨
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        env: # --- ÎπÑÎ∞Ä/ÌôòÍ≤ΩÎ≥ÄÏàò Î™©Î°ù ---
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AES_SECRET_KEY: ${{ secrets.AES_SECRET_KEY }}
          ARIA_SECRET_KEY: ${{ secrets.ARIA_SECRET_KEY }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_REDIRECT_URI: ${{ secrets.NAVER_REDIRECT_URI }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GCP_SERVICE_KEY_JSON: ${{ secrets.GCP_SERVICE_KEY_JSON }}
          GCP_ENABLED: ${{ secrets.GCP_ENABLED }}
          GCP_PROJECT_ID: ${{ env.GCP_PROJECT_ID }}
          GCP_PROCESSOR_ID: ${{ secrets.GCP_PROCESSOR_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          JWT_ACCESS_TOKEN_VALIDITY: ${{ secrets.JWT_ACCESS_TOKEN_VALIDITY }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          envs: >
            DATABASE_URL,DB_USERNAME,DB_PASSWORD,MONGODB_URI,JWT_SECRET,
            AES_SECRET_KEY,ARIA_SECRET_KEY,MAIL_USERNAME,MAIL_PASSWORD,KAKAO_CLIENT_ID,
            KAKAO_CLIENT_SECRET,KAKAO_REDIRECT_URI,NAVER_CLIENT_ID,
            NAVER_CLIENT_SECRET,NAVER_REDIRECT_URI,GEMINI_API_KEY,
            GCP_SERVICE_KEY_JSON,GCP_ENABLED,GCP_PROJECT_ID,GCP_PROCESSOR_ID,
            AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,
            AWS_S3_BUCKET_NAME,FRONTEND_URL,JWT_ACCESS_TOKEN_VALIDITY,
            SERVER_PORT,AWS_ACCOUNT_ID
          script: |
            set -euo pipefail

            # --- Í≥µÌÜµ ÌôòÍ≤Ω ---
            export ECR_REGISTRY="${{ env.ECR_REGISTRY }}"
            export IMAGE_TAG="${{ env.IMAGE_TAG }}"
            export AWS_REGION="${{ env.AWS_REGION }}"

            echo "======> Deployment started on EC2"
            cd /home/ubuntu

            echo "======> 1. AWS ECR Î°úÍ∑∏Ïù∏"
            aws ecr get-login-password --region "$AWS_REGION" |
              docker login --username AWS --password-stdin "$ECR_REGISTRY"

            echo "======> 2. jq ÏÑ§Ïπò Î∞è gcp-key.json ÏÉùÏÑ±"
            sudo apt-get update && sudo apt-get install -y jq
            # jqÎ•º ÏÇ¨Ïö©ÌïòÏó¨ GitHub SecretÏùò JSON Î¨∏ÏûêÏó¥ÏùÑ ÌååÏã±ÌïòÍ≥†, Îî∞Ïò¥Ìëú ÏóÜÏù¥ ÌååÏùºÎ°ú Ï†ÄÏû•
            echo "$GCP_SERVICE_KEY_JSON" | jq -r '.' > /home/ubuntu/gcp-key.json

            echo "======> 3. .env ÌååÏùº ÏÉùÏÑ± Î∞è ÌôòÍ≤ΩÎ≥ÄÏàò Í≤ÄÏ¶ù"
            echo "--- Ï†ÑÎã¨Îêú GCP_PROCESSOR_ID Í∞í ÌôïÏù∏ ---"
            echo "GCP_PROCESSOR_ID: $GCP_PROCESSOR_ID"
            echo "------------------------------------"

            cat > .env <<EOF
            DATABASE_URL=$DATABASE_URL
            DB_USERNAME=$DB_USERNAME
            DB_PASSWORD=$DB_PASSWORD
            MONGODB_URI=$MONGODB_URI
            REDIS_HOST=redis
            REDIS_PORT=6379
            JWT_SECRET=$JWT_SECRET
            JWT_ACCESS_TOKEN_VALIDITY=$JWT_ACCESS_TOKEN_VALIDITY
            AES_SECRET_KEY=$AES_SECRET_KEY
            ARIA_SECRET_KEY=$ARIA_SECRET_KEY
            MAIL_USERNAME=$MAIL_USERNAME
            MAIL_PASSWORD=$MAIL_PASSWORD
            SERVER_PORT=$SERVER_PORT
            KAKAO_CLIENT_ID=$KAKAO_CLIENT_ID
            KAKAO_CLIENT_SECRET=$KAKAO_CLIENT_SECRET
            KAKAO_REDIRECT_URI=$KAKAO_REDIRECT_URI
            NAVER_CLIENT_ID=$NAVER_CLIENT_ID
            NAVER_CLIENT_SECRET=$NAVER_CLIENT_SECRET
            NAVER_REDIRECT_URI=$NAVER_REDIRECT_URI
            GEMINI_API_KEY=$GEMINI_API_KEY
            CHATBOT_API_BASE_URL=http://43.201.42.119:8000
            GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json
            GCP_ENABLED=$GCP_ENABLED
            GCP_PROJECT_ID=$GCP_PROJECT_ID
            GCP_PROCESSOR_ID=$GCP_PROCESSOR_ID
            AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            AWS_REGION=$AWS_REGION
            AWS_S3_BUCKET_NAME=$AWS_S3_BUCKET_NAME
            AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
            FRONTEND_URL=$FRONTEND_URL
            SPRING_PROFILES_ACTIVE=prod
            ECR_REGISTRY=$ECR_REGISTRY
            IMAGE_TAG=$IMAGE_TAG
            EOF
            echo "‚úÖ .env file created."

            echo "======> 4. Docker Ï†ïÎ¶¨ Î∞è Ïû¨Î∞∞Ìè¨"
            mv docker-compose.prod.yml docker-compose.yml
            if command -v docker-compose &>/dev/null; then
              COMPOSE_CMD="docker-compose"
            else
              COMPOSE_CMD="docker compose"
            fi

            $COMPOSE_CMD down --remove-orphans || true
            docker system prune -af

            $COMPOSE_CMD --env-file ./.env up -d --force-recreate
            echo "‚úÖ Docker Compose 'up' command executed."

            echo "======> Waiting for containers to initialize..."
            sleep 20

            echo "======> 6. Health check"
            HEALTH_CHECK_URL="http://localhost:8080/actuator/health"
            echo "Health checking at: $HEALTH_CHECK_URL"
            # 10Ï¥à Í∞ÑÍ≤©ÏúºÎ°ú 6Î≤à (Ï¥ù 1Î∂Ñ) Ìó¨Ïä§Ï≤¥ÌÅ¨
            for i in {1..6}; do
              HTTP_CODE=$(curl -v -s -o /dev/stderr -w "%{http_code}" "$HEALTH_CHECK_URL" || echo "000")
              if [ "$HTTP_CODE" -eq 200 ]; then
                echo "‚úÖ Health check PASSED on attempt $i with status $HTTP_CODE."
                $COMPOSE_CMD ps
                exit 0
              fi
              echo "Attempt $i: Health check failed with HTTP status $HTTP_CODE. Retrying in 10 seconds..."
              sleep 10
            done

            echo "üö® Health check FAILED after multiple attempts."
            echo "======> Final container status:"
            $COMPOSE_CMD ps -a

            APP_CONTAINER_ID=$($COMPOSE_CMD ps -q app)
            if [ -n "$APP_CONTAINER_ID" ]; then
              echo "======> Displaying last 200 lines of logs for container 'app' ($APP_CONTAINER_ID):"
              docker logs --tail 200 "$APP_CONTAINER_ID"
            else
              echo "‚ö†Ô∏è Could not find the 'app' container to display logs."
            fi

            exit 1
