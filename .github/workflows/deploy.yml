# .github/workflows/deploy.yml
name: Deploy Spring Boot to EC2

on:
  push:
    branches: [develop, "feat/**"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 소스 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2) JDK 설치
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "17"

      # 3) Gradle 캐시
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4) 빌드 (테스트 스킵)
      - name: Build Spring Boot App
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar -x test

      # 5) SSH 키 설정
      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 400 ec2_key.pem
          ssh-keygen -y -f ec2_key.pem >/dev/null && echo "✅ SSH key OK"

      # 6) EC2 배포
      - name: Deploy and Run on EC2
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AES_SECRET_KEY: ${{ secrets.AES_SECRET_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          set -e

          echo "--- EC2 상태 확인 ---"
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@$EC2_HOST '
            echo "Memory:" && free -h
            echo "Disk:"   && df -h /home/ubuntu
            echo "Load:"   && uptime
          ' || echo "EC2 상태 확인 실패 (무시)"

          echo "--- Copying JAR (10 min timeout) ---"
          ls -lh build/libs/*-SNAPSHOT.jar
          timeout 600 scp -C -i ec2_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            build/libs/*-SNAPSHOT.jar ubuntu@$EC2_HOST:/home/ubuntu/ \
          || { echo "❌ JAR 전송 실패"; exit 1; }

          echo "--- Copying docker-compose file ---"
          timeout 60 scp -C -i ec2_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            docker-compose.redis.yml ubuntu@$EC2_HOST:/home/ubuntu/

          echo "--- 원격 배포 스크립트 작성 ---"
          cat > deploy_script.sh << 'REMOTE'
          #!/usr/bin/env bash
          set -e

          echo "=== Java 설치 확인 ==="
          if ! command -v java &>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y openjdk-17-jre-headless
          fi

          echo "=== Docker 설치 확인 ==="
          if ! command -v docker &>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io curl net-tools
            sudo systemctl enable --now docker
            sudo usermod -aG docker ubuntu
            sleep 5
          fi

          if ! command -v docker-compose &>/dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" \
                 -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
          fi

          echo "=== Redis 재시작 ==="
          cd /home/ubuntu
          sudo docker-compose -f docker-compose.redis.yml down || true
          sudo docker-compose -f docker-compose.redis.yml up -d

          echo "=== JAR 교체 ==="
          JAR=$(ls /home/ubuntu/*-SNAPSHOT.jar | head -1)
          [ -f "$JAR" ] && mv "$JAR" app.jar

          echo "=== 기존 앱 중지 ==="
          pkill -f 'java -jar'

          # 올바른 DATABASE_URL 설정
          export DATABASE_URL="jdbc:mysql://superlawva-db.chg1ephxbhjv.ap-northeast-2.rds.amazonaws.com:3306/superlawva"

          echo "=== 애플리케이션 실행 ==="
          nohup java -jar app.jar \
            -Dspring.profiles.active=prod \
            --spring.datasource.url="$DATABASE_URL" \
            --spring.datasource.username="$DB_USERNAME" \
            --spring.datasource.password="$DB_PASSWORD" \
            --spring.mail.username="$MAIL_USERNAME" \
            --spring.mail.password="$MAIL_PASSWORD" \
            --spring.security.oauth2.client.registration.kakao.client-id="$KAKAO_CLIENT_ID" \
            --spring.security.oauth2.client.registration.kakao.client-secret="$KAKAO_CLIENT_SECRET" \
            --spring.security.oauth2.client.registration.naver.client-id="$NAVER_CLIENT_ID" \
            --spring.security.oauth2.client.registration.naver.client-secret="$NAVER_CLIENT_SECRET" \
            --jwt.secret="$JWT_SECRET" \
            --aes.secret-key="$AES_SECRET_KEY" \
            > log.txt 2>&1 &

          echo "PID: $!"
          sleep 10
          pgrep -f 'java -jar' && echo "✅ 애플리케이션 기동 완료"

          # 로그 확인
          tail -f log.txt
          REMOTE

          scp -C -i ec2_key.pem -o StrictHostKeyChecking=no deploy_script.sh ubuntu@$EC2_HOST:/home/ubuntu/
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_HOST '
            chmod +x /home/ubuntu/deploy_script.sh
            /home/ubuntu/deploy_script.sh
          '
